{"version":3,"sources":["components/Header.jsx","components/LoaderStyle.jsx","components/Todo.jsx","components/Complete.jsx","components/ToComplete.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","handleAllList","id","handleComplete","handleReset","status","className","onClick","LoaderBar","Todo","title","handleCompleteTodo","Complete","titleComplete","ToComplete","titleReset","App","useState","todoList","setTodoList","isLoading","setIsLoading","completed","setIsCompleted","reset","setIsReset","all","setIsAll","useEffect","handleTodoList","a","fetch","response","json","result","slice","map","todo","LoaderStyle","singleTodo","completeTodo","resetTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3f04357.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n//Styles KAKA\r\nimport \"../styles/HeaderStyle.css\"\r\n\r\nconst Header = ({handleAllList, id, handleComplete, handleReset, status}) => {\r\n\r\n    return (\r\n\r\n        <header>\r\n            <h1 className=\"Logo\">To-Do List</h1>\r\n            <div className=\"buttons\">\r\n                <button className=\"all\" onClick={() => handleAllList()}>All list</button>\r\n                <button className=\"complete\"\r\n                onClick={() => handleComplete(id)} >Complete</button>\r\n                <button className=\"reset\" onClick={() => handleReset()} >To complete</button>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header; ","import React from \"react\";\r\n\r\n\r\n//Styles\r\n\r\nimport \"../styles/Loader.css\"\r\n\r\n\r\nconst LoaderBar = () => {\r\n    return(\r\n        <div className=\"loader\">\r\n            <p>Loading...</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoaderBar;","import React from \"react\"\r\n\r\n//Styles\r\nimport \"../styles/Todo.css\"\r\n\r\n\r\n\r\nconst Todo = ({title, status, handleCompleteTodo, id}) => {\r\n    return (\r\n        <div className=\"todoCard\">\r\n            <div className=\"todoTitle\">\r\n                <h4>{title} </h4>\r\n            </div>\r\n\r\n            <div className=\"todoActions\">\r\n                <button className={status ? \"complete\" : \"reset\"} \r\n                onClick={() => handleCompleteTodo(id)}\r\n                >\r\n                    {status ? \"Complete\" : \"To complete\" }  </button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\n//Styles\r\nimport \"../styles/Todo.css\"\r\n\r\nconst Complete = ({ titleComplete, status, handleComplete, id, handleCompleteTodo }) => {\r\n    return (\r\n\r\n\r\n            <div className={\"todoCard\"}>\r\n                <div className=\"todoTitle\">\r\n                    <h4>{titleComplete} </h4>\r\n                </div>\r\n\r\n                <div className=\"todoActions\">\r\n                    <button className={status ? \"complete\" : \"reset\"} \r\n                        onClick={() => handleCompleteTodo(id)}\r\n                    >\r\n                        {status ? \"Complete\" : \"To complete\"}  </button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Complete;","import React from \"react\";\r\n\r\n// Styles\r\n\r\nimport \"../styles/Todo.css\"\r\n\r\nconst ToComplete = ({status, titleReset, id, handleReset, handleCompleteTodo}) => {\r\n    return(\r\n        <div className=\"todoCard\">\r\n        <div className=\"todoTitle\">\r\n            <h4>{titleReset} </h4>\r\n        </div>\r\n\r\n        <div className=\"todoActions\">\r\n            <button className={status ? \"complete\" : \"reset\"} \r\n                onClick={() => handleCompleteTodo(id)}\r\n            >\r\n                {status ? \"Complete\" : \"To complete\"}  </button>\r\n\r\n        </div>\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ToComplete;","import React, { useState, useEffect } from \"react\";\n/* \nimportaciones react\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\"\n*/\n// Components\nimport Header from \"./components/Header\";\nimport LoaderStyle from \"./components/LoaderStyle\";\nimport Todo from \"./components/Todo\";\nimport Complete from \"./components/Complete\";\nimport ToComplete from \"./components/ToComplete\";\n\n//Styles \nimport \"./styles/App.css\"\n\n\n\nfunction App() {\n\n  //State\n  const [todoList, setTodoList] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [completed, setIsCompleted] = useState(false)\n  const [reset, setIsReset] = useState(false)\n  const [all, setIsAll] = useState(false)\n\n\n  //Effect\n\n  useEffect(() => {\n    const handleTodoList = async () => {\n      setIsLoading(true)\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/todos\")\n      const result = await response.json()\n      const todoList = result.slice(0, 20);\n      setTodoList(todoList)\n      setIsLoading(false)\n    }\n\n    handleTodoList();\n  }, [])\n\n  //Functions\n\n\n  const handleCompleteTodo = id => {\n    setTodoList(todoList.map(todo => todo.id === id ? { ...todo, completed: !todo.completed } : todo))\n  }\n  const handleAllList = () => {\n    setIsAll(true)\n    setIsReset(false)\n    setIsCompleted(false)\n  }\n  const handleComplete = (id) => {\n    setIsCompleted(true)\n    setIsAll(false)\n    setIsReset(false)\n  }\n  const handleReset = () => {\n    setIsReset(true)\n    setIsCompleted(false)\n    setIsAll(false)\n  }\n\n  return (\n    <div className=\"\">\n\n      <Header\n        handleAllList={handleAllList}\n        handleComplete={handleComplete}\n        handleReset={handleReset}\n      />\n      {isLoading && <LoaderStyle />}\n\n      <div className=\"todoContainer1\">\n        {todoList ?\n          todoList.map(singleTodo => (\n            all && (<Todo\n              key={singleTodo.id}\n              title={singleTodo.title}\n              status={singleTodo.completed}\n              handleCompleteTodo={handleCompleteTodo}\n              id={singleTodo.id}\n            />)\n       \n          )) : null}\n\n\n      </div>\n      <div className=\"todoContainer1\">\n        {\n          todoList ?\n            todoList.map(completeTodo => !completeTodo.completed ? completeTodo.completed : (\n              completed && (<Complete onClick={() => handleComplete()}\n              key={completeTodo.id}\n              handleComplete={handleComplete}\n              status={completeTodo.completed}\n              titleComplete={completeTodo.title}\n              id={completeTodo.id}\n              handleCompleteTodo={handleCompleteTodo}\n\n            />)\n              \n            )) : null\n        }\n      </div>\n      <div className=\"todoContainer1\">\n        {\n          todoList ?\n            todoList.map(resetTodo => resetTodo.completed ? resetTodo.completed : (\n              reset && (<ToComplete\n                key={resetTodo.id}\n                handleReset={handleReset}\n                status={resetTodo.completed}\n                titleReset={resetTodo.title}\n                id={resetTodo.id}\n                handleCompleteTodo={handleCompleteTodo}\n\n              />)\n     \n            )) : null\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}